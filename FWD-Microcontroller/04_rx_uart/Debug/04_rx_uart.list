
04_rx_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000310  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004d4  080004d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004d4  080004d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004d4  080004d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004d4  080004d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004d8  080004d8  000104d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004e0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001588  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000538  00000000  00000000  000215bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00021af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00021ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f67f  00000000  00000000  00021e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f6e  00000000  00000000  0004150f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2d95  00000000  00000000  0004347d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000604  00000000  00000000  00106264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004bc 	.word	0x080004bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004bc 	.word	0x080004bc

08000204 <main>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
    uart2_init();
 800020a:	f000 f833 	bl	8000274 <uart2_init>

    while(1)
    {
        // Echo received characters back
        if (USART2->SR & SR_RXNE) {
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x30>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f003 0320 	and.w	r3, r3, #32
 8000216:	2b00      	cmp	r3, #0
 8000218:	d007      	beq.n	800022a <main+0x26>
            char received_char = uart2_read();
 800021a:	f000 f89d 	bl	8000358 <uart2_read>
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
            uart2_write(received_char);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f87f 	bl	8000328 <uart2_write>

        }

        delayMs(5); // Delay for stability
 800022a:	2005      	movs	r0, #5
 800022c:	f000 f804 	bl	8000238 <delayMs>
        if (USART2->SR & SR_RXNE) {
 8000230:	e7ed      	b.n	800020e <main+0xa>
 8000232:	bf00      	nop
 8000234:	40004400 	.word	0x40004400

08000238 <delayMs>:

    return 0;
}

void delayMs(int n)
{
 8000238:	b480      	push	{r7}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
    for (; n > 0; n--)
 8000240:	e00d      	b.n	800025e <delayMs+0x26>
        for (int i = 0; i < 5000; i++);
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	e002      	b.n	800024e <delayMs+0x16>
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	3301      	adds	r3, #1
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	f241 3287 	movw	r2, #4999	; 0x1387
 8000254:	4293      	cmp	r3, r2
 8000256:	ddf7      	ble.n	8000248 <delayMs+0x10>
    for (; n > 0; n--)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2b00      	cmp	r3, #0
 8000262:	dcee      	bgt.n	8000242 <delayMs+0xa>
}
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
	...

08000274 <uart2_init>:

void uart2_init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    // Enable clock access to GPIOA
    RCC->AHB1ENR |= GPIOAEN;
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <uart2_init+0x58>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a13      	ldr	r2, [pc, #76]	; (80002cc <uart2_init+0x58>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA2 (USART2_TX) and PA3 (USART2_RX) mode to alternate function mode
    GPIOA->MODER |= PA2MOD | PA3MOD;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <uart2_init+0x5c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <uart2_init+0x5c>)
 800028a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800028e:	6013      	str	r3, [r2, #0]
    // Set PA2 and PA3 alternate function type to UART (AF07)
    GPIOA->AFR[0] |= PA2AF | PA3AF;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <uart2_init+0x5c>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <uart2_init+0x5c>)
 8000296:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800029a:	6213      	str	r3, [r2, #32]

    // Enable clock access to USART2
    RCC->APB1ENR |= APB1EN;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <uart2_init+0x58>)
 800029e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <uart2_init+0x58>)
 80002a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a6:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure baudrate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80002a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002ac:	4909      	ldr	r1, [pc, #36]	; (80002d4 <uart2_init+0x60>)
 80002ae:	480a      	ldr	r0, [pc, #40]	; (80002d8 <uart2_init+0x64>)
 80002b0:	f000 f814 	bl	80002dc <uart_set_baudrate>

    // Configure USART2 for both transmission and reception
    USART2->CR1 = USART2_TX | USART2_RX;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <uart2_init+0x64>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	60da      	str	r2, [r3, #12]

    // Enable USART2 module
    USART2->CR1 |= USART2EN;
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <uart2_init+0x64>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <uart2_init+0x64>)
 80002c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c4:	60d3      	str	r3, [r2, #12]
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000
 80002d4:	00f42400 	.word	0x00f42400
 80002d8:	40004400 	.word	0x40004400

080002dc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	60b9      	str	r1, [r7, #8]
 80002e6:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	68b8      	ldr	r0, [r7, #8]
 80002ec:	f000 f808 	bl	8000300 <compute_uart_bd>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	609a      	str	r2, [r3, #8]
}
 80002f8:	bf00      	nop
 80002fa:	3710      	adds	r7, #16
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	085a      	lsrs	r2, r3, #1
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	441a      	add	r2, r3
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	fbb2 f3f3 	udiv	r3, r2, r3
 8000318:	b29b      	uxth	r3, r3
}
 800031a:	4618      	mov	r0, r3
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr
	...

08000328 <uart2_write>:

void uart2_write(int ch)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    // Wait until transmit data register is empty
    while(!(USART2->SR & SR_TXE));
 8000330:	bf00      	nop
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <uart2_write+0x2c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <uart2_write+0xa>

    // Send character via UART
    USART2->DR = (ch & 0xFF);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <uart2_write+0x2c>)
 8000342:	b2db      	uxtb	r3, r3
 8000344:	6053      	str	r3, [r2, #4]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40004400 	.word	0x40004400

08000358 <uart2_read>:

int uart2_read(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
    // Wait until data is received
    while (!(USART2->SR & SR_RXNE));
 800035c:	bf00      	nop
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <uart2_read+0x24>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0320 	and.w	r3, r3, #32
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <uart2_read+0x6>

    // Read received data
    return (USART2->DR & 0xFF);
 800036a:	4b04      	ldr	r3, [pc, #16]	; (800037c <uart2_read+0x24>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	b2db      	uxtb	r3, r3
}
 8000370:	4618      	mov	r0, r3
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40004400 	.word	0x40004400

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <NMI_Handler+0x4>

08000386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038a:	e7fe      	b.n	800038a <HardFault_Handler+0x4>

0800038c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000390:	e7fe      	b.n	8000390 <MemManage_Handler+0x4>

08000392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000396:	e7fe      	b.n	8000396 <BusFault_Handler+0x4>

08000398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <UsageFault_Handler+0x4>

0800039e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr

080003ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003cc:	f000 f83e 	bl	800044c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <SystemInit+0x20>)
 80003da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003de:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <SystemInit+0x20>)
 80003e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003fe:	490e      	ldr	r1, [pc, #56]	; (8000438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0b      	ldr	r2, [pc, #44]	; (8000440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000414:	4c0b      	ldr	r4, [pc, #44]	; (8000444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000422:	f7ff ffd7 	bl	80003d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000426:	f000 f825 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800042a:	f7ff feeb 	bl	8000204 <main>
  bx  lr    
 800042e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800043c:	080004dc 	.word	0x080004dc
  ldr r2, =_sbss
 8000440:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000444:	20000024 	.word	0x20000024

08000448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC_IRQHandler>
	...

0800044c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_IncTick+0x20>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <HAL_IncTick+0x24>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4413      	add	r3, r2
 800045c:	4a04      	ldr	r2, [pc, #16]	; (8000470 <HAL_IncTick+0x24>)
 800045e:	6013      	str	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000000 	.word	0x20000000
 8000470:	20000020 	.word	0x20000020

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	; (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	; (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	; (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	; (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004d4 	.word	0x080004d4
 80004b0:	080004d4 	.word	0x080004d4
 80004b4:	080004d4 	.word	0x080004d4
 80004b8:	080004d8 	.word	0x080004d8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
